/*
 * This file is generated by jOOQ.
 */
package com.melon.mysql.generatedclasses.tables;


import com.melon.mysql.generatedclasses.Indexes;
import com.melon.mysql.generatedclasses.JooqDemo;
import com.melon.mysql.generatedclasses.Keys;
import com.melon.mysql.generatedclasses.tables.records.PeopleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class People extends TableImpl<PeopleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_demo.people</code>
     */
    public static final People PEOPLE = new People();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeopleRecord> getRecordType() {
        return PeopleRecord.class;
    }

    /**
     * The column <code>jooq_demo.people.id</code>.
     */
    public final TableField<PeopleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq_demo.people.name</code>.
     */
    public final TableField<PeopleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>jooq_demo.people.email</code>.
     */
    public final TableField<PeopleRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>jooq_demo.people.gender</code>.
     */
    public final TableField<PeopleRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(6).nullable(false), this, "");

    private People(Name alias, Table<PeopleRecord> aliased) {
        this(alias, aliased, null);
    }

    private People(Name alias, Table<PeopleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq_demo.people</code> table reference
     */
    public People(String alias) {
        this(DSL.name(alias), PEOPLE);
    }

    /**
     * Create an aliased <code>jooq_demo.people</code> table reference
     */
    public People(Name alias) {
        this(alias, PEOPLE);
    }

    /**
     * Create a <code>jooq_demo.people</code> table reference
     */
    public People() {
        this(DSL.name("people"), null);
    }

    public <O extends Record> People(Table<O> child, ForeignKey<O, PeopleRecord> key) {
        super(child, key, PEOPLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqDemo.JOOQ_DEMO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PEOPLE_IDX_PEOPLE_ID);
    }

    @Override
    public Identity<PeopleRecord, Integer> getIdentity() {
        return (Identity<PeopleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PeopleRecord> getPrimaryKey() {
        return Keys.KEY_PEOPLE_PRIMARY;
    }

    @Override
    public People as(String alias) {
        return new People(DSL.name(alias), this);
    }

    @Override
    public People as(Name alias) {
        return new People(alias, this);
    }

    @Override
    public People as(Table<?> alias) {
        return new People(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(String name) {
        return new People(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(Name name) {
        return new People(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(Table<?> name) {
        return new People(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
